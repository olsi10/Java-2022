    //클래스란?
    // 객체를 만들어 내기위한 설계도 혹은 틀! (ex. 붕어빵 틀)
    // 연관되어 있는 변수와 메서드의 집합
    //자바에서 설계도 --> 클래스
    // 클래스는 객체를 생성하기 위한 필드와 메소드가 정의되어 있음

    //객체란?
    // 소프트웨어 세계에 구현할 대상
    // 클래스에 선언된 모양 그대로 생성될 실체
    // 객체를 실체화하면 '인스턴스'라 부른다.

    //객체 특징
    // 클래스로부터 객체를 만드는 과정을 인스턴스화라 한다.
    // 하나의 클래스로부터 여러 개의 인스턴스(객체) 생성 가능
    // 클래스로부터 만들어진 객체를 해당 클래스의 인스턴스(instance)라 한다.
    // ex) 자동차 객체는 자동차 클래스 인스턴스이다.

    //인스턴스 특징
    //인스턴스는 객체에 포함된다.
    //객체는 클래스의 인스턴스이다.
    //객체 간의 링크는 클래스 간의 연관 관계에 인스턴스다.
    //즉, 어떤 원본(추상적인 개념)으로부터 '생성된 복제본'을 의미미

    //클래스
    class Animal {
        String name;
        int age;
}
    //객체와 인스턴스
    public class Java01 {
        public static void main(String[] args) {
            Animal cat, dog; //객체

            //인스턴스화
            cat = new Animal(); //cat은 Animal 클래스의 '인스턴스'
            dog = new Animal(); //dog은 Animal 클래스의 '인스턴스'
        }
    }

    //클래스 VS 객체
    // = 클래스는 설계도, 객체는 설계도로 구현한 모든 대상

    //객체 VS 인스턴스
    // = 클래스 타입으로 선언시 -> 객체, 그 객체가 메모리에 할당되어 실제 사용시 -> 인스턴스
    // = 객체는 현실과 가깝고, 인스턴스는 소프트웨어 세계에 근접
    // = 객체는 '실체', 인스턴스는 '관계'에 초점

    //추상화 기법
    // 객체 -> 클래스
    // 실재하는 객체들을 공통적인 속성을 공유하는 범부 또는 추상적인 개념으로 묶는 것

    //인스턴스화
    // 클래스 -> 인스턴스
    // 분류의 반대 개념, 범주나 개념으로부터 실재하는 객체를 만드는 과정
    // 구체적으로 클래스 내 객체에 대해 특정 변형 제외 후, 이름 붙이고 어떤 장소에 위치시키는 작업으로 인스턴스를 만드는 것을 말함

